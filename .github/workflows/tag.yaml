name: Build and Package NiimPrintX App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-13

    steps:
      - name: Extract Tag
        id: get_tag_name
        run: echo "name=VERSION::${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Install ImageMagick & create-dmg
        run: brew install imagemagick create-dmg

      - name: Package application with PyInstaller
        run: poetry run pyinstaller spec_files/ui_app/NiimPrintX-mac.spec --noconfirm --clean

      - name: Create DMG package
        run: ./.github/workflows/mac-dmg-builder.sh "${{ steps.get_tag_name.outputs.VERSION }}"

      - name: Package CLI with PyInstaller
        run: poetry run pyinstaller spec_files/cli_app/NiimPrintX-mac.spec --noconfirm --clean

      - name: Create CLI compressed file
        run: cd dist && tar -czf NiimPrintX-CLI-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.tar.gz niimprintx

      - name: Upload DMG package
        uses: actions/upload-artifact@v4
        with:
          name: NiimPrintX-Installer-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.dmg
          path: dist/NiimPrintX-Installer-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.dmg

      - name: Upload CLI package
        uses: actions/upload-artifact@v4
        with:
          name: NiimPrintX-CLI-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.tar.gz
          path: dist/NiimPrintX-CLI-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.tar.gz

#      - name: Create GitHub Release
#        id: create_release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: dist/NiimPrintX-Installer-${{ steps.get_tag_name.outputs.VERSION }}-MacOSX.dmg
#          generate_release_notes: true

